@page "/"
@using RaspiFanController.Logic
@inject RaspiTemperatureController RaspiTemperatureController

<div class="container">
    @if (HasError)
    {
        <div class="row">

            <div class="alert alert-danger" role="alert">
                Error message: @ErrorMessage
            </div>
        </div>
    }
    <div class="row">
        @if (IsPlatformSupported)
        {
            <div class="col-sm">
                <div class="card">
                    <h1 class="card-header text-center text-white bg-info mb-3">Live: @Temperature°@Unit</h1>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-7">
                                <h5>Fan is running</h5>
                            </div>
                            <div class="col-5">
                                <h5>@FanIsRunning</h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-7">
                                Upper Threshold
                            </div>
                            <div class="col-5">
                                @UpperTemperatureThreshold°@Unit
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-7">
                                Lower Threshold
                            </div>
                            <div class="col-5">
                                @LowerTemperatureThreshold°@Unit
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-7">
                                Mode
                            </div>
                            <div class="col-5">
                                @RegulationMode
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-7">
                                Uptime
                            </div>
                            <div class="col-5">
                                @Uptime.ToString(@"d\.hh\:mm\:ss")
                            </div>
                        </div>
                    </div>
                    <div class="card-footer text-white bg-info mb-3">
                        <form>
                            <fieldset class="form-group">
                                <div class="row">
                                    <legend class="col-form-label col-7 pt-0">Mode</legend>
                                    <div class="col-5">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Automatic)" value="Automatic" @onchange="ModeChanged"/> Automatic
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="radio" name="mode" checked="@(RegulationMode == RegulationMode.Manual)" value="Manual" @onchange="ModeChanged"/> Manual
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="form-group">
                                <div class="row">
                                    <legend class="col-form-label col-7 pt-0">Fan</legend>
                                    <div class="col-5">
                                        @if (AllowManualControl)
                                        {
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="radio" name="fanIsRunning" checked="@(FanIsRunning)" value="True" @onchange="FanIsRunningChanged"/> Turn On
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="radio" name="fanIsRunning" checked="@(!FanIsRunning)" value="False" @onchange="FanIsRunningChanged"/> Turn Off
                                                </label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="radio" name="fanIsRunning" checked="@(FanIsRunning)" disabled/> Turn On
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="radio" name="fanIsRunning" checked="@(!FanIsRunning)" disabled/> Turn Off
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </fieldset>
                            <div class="form-group row">
                                <label for="upperThreshold" class="col-7 col-form-label">Upper Threshold</label>
                                <div class="col-5">
                                    <input type="number" class="form-control" id="upperThreshold" name="threshold" value="@UpperTemperatureThreshold" min="@MinForUpperThreshold" @onchange="UpperTemperatureThresholdChanged">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="lowerThreshold" class="col-7 col-form-label">Lower Threshold</label>
                                <div class="col-5">
                                    <input type="number" class="form-control" id="lowerThreshold" name="threshold" value="@LowerTemperatureThreshold" max="@MaxForLowerThreshold" @onchange="LowerTemperatureThresholdChanged">
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                Sorry, your OS platform is not supported.
            </div>
        }
    </div>
</div>

@code {

    private RegulationMode RegulationMode { get; set; }

    private bool IsPlatformSupported { get; set; }

    private bool FanIsRunning { get; set; }

    private bool AllowManualControl { get; set; }

    private string Temperature { get; set; } = string.Empty;

    private int UpperTemperatureThreshold { get; set; }

    private int MinForUpperThreshold => LowerTemperatureThreshold + 1;

    private int LowerTemperatureThreshold { get; set; }

    private int MaxForLowerThreshold => UpperTemperatureThreshold - 1;

    private string Unit { get; set; } = string.Empty;

    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);

    private string ErrorMessage { get; set; } = string.Empty;

    private TimeSpan Uptime { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        AllowManualControl = RaspiTemperatureController.RegulationMode == RegulationMode.Manual;
        IsPlatformSupported = RaspiTemperatureController.IsPlatformSupported;

        StartPollingAsync();
    }

    private async void StartPollingAsync()
    {
        while (true)
        {
            Temperature = $"{RaspiTemperatureController.CurrentTemperature:F1}";
            UpperTemperatureThreshold = RaspiTemperatureController.UpperTemperatureThreshold;
            LowerTemperatureThreshold = RaspiTemperatureController.LowerTemperatureThreshold;
            Unit = RaspiTemperatureController.Unit;
            RegulationMode = RaspiTemperatureController.RegulationMode;
            FanIsRunning = RaspiTemperatureController.IsFanRunning;
            Uptime = RaspiTemperatureController.Uptime;

            StateHasChanged();

            await Task.Delay(RaspiTemperatureController.RefreshMilliseconds);
        }
    }

    private void ModeChanged(ChangeEventArgs changeEventArgs)
    {
        switch (changeEventArgs.Value)
        {
            case "Automatic":
                RaspiTemperatureController.SetAutomaticTemperatureRegulation();
                AllowManualControl = false;
                break;
            case "Manual":
                AllowManualControl = true;
                break;
        }
    }

    private void UpperTemperatureThresholdChanged(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            if (!RaspiTemperatureController.TrySetUpperTemperatureThreshold(result))
            {
                ErrorMessage = $"Please enter a temperature higher than {LowerTemperatureThreshold}°{Unit}";
            }
        }
        else
        {
            ErrorMessage = "Please enter a valid number for upper temperature threshold";
        }
    }

    private void LowerTemperatureThresholdChanged(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs.Value?.ToString(), out var result))
        {
            ErrorMessage = string.Empty;
            if (!RaspiTemperatureController.TrySetLowerTemperatureThreshold(result))
            {
                ErrorMessage = $"Please enter a temperature lower than {UpperTemperatureThreshold}°{Unit}";
            }
        }
        else
        {
            ErrorMessage = "Please enter a valid number for lower temperature threshold";
        }
    }

    private void FanIsRunningChanged(ChangeEventArgs changeEventArgs)
    {
        if (bool.TryParse(changeEventArgs.Value?.ToString(), out var result))
        {
            RaspiTemperatureController.SetManualTemperatureRegulation(result);
        }
        else
        {
            // Fallback to avoid overheating
            RaspiTemperatureController.SetManualTemperatureRegulation(true);
        }
    }

}