name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  Release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'
    - name: Install dependencies
      run: dotnet restore
    - name: .NET Build
      run: dotnet build --configuration Release --no-restore
    - name: .NET Test
      run: dotnet test --no-build --configuration Release --verbosity normal
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build Docker and push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: |
          mu88/raspifancontroller:latest
          mu88/raspifancontroller:${{ github.ref_name }}
        file: RaspiFanController/Dockerfile
    - name: .NET Publish
      run: dotnet publish RaspiFanController/RaspiFanController.csproj -r linux-arm64 -c Release /p:PublishSingleFile=true --self-contained
    - name: Create artifact
      run: |
        cd /home/runner/work/RaspiFanController/RaspiFanController/RaspiFanController/bin/Release/net7.0/linux-arm64/publish
        zip -r RaspiFanController.zip *
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload asset to GitHub Release
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/work/RaspiFanController/RaspiFanController/RaspiFanController/bin/Release/net7.0/linux-arm64/publish/RaspiFanController.zip
        asset_name: RaspiFanController.zip
        asset_content_type: application/zip
